name: backend-build

on:
  pull_request:
    branches: [main, develop, qa, canary]
    paths:
      - "twake/backend/core/**"
      - "twake/backend/node/**"

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Prettier code style check
        run: cd twake && docker-compose -f docker-compose.tests.yml run -e NODE_OPTIONS=--unhandled-rejections=warn node npm run lint:prettier
      - name: Lint
        run: cd twake && docker-compose -f docker-compose.tests.yml run -e NODE_OPTIONS=--unhandled-rejections=warn node npm run lint
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: build-test
        run: cd twake && docker-compose -f docker-compose.tests.yml run -e NODE_OPTIONS=--unhandled-rejections=warn node npm run build
      - name: unit-test
        run: cd twake && docker-compose -f docker-compose.tests.yml run -e NODE_OPTIONS=--unhandled-rejections=warn node npm run test:unit
      - name: Comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Coverage results!'
            })
      - name: upload test coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-${{ github.event.pull_request.number }}
          path: twake/coverage/
      - name: deploy coverage report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: twake/coverage/
          destination_dir: test/coverage/pr-${{ github.event.pull_request.number }} 
      - name: e2e-mongo-test
        run: cd twake && docker-compose -f docker-compose.tests.yml run -e NODE_OPTIONS=--unhandled-rejections=warn -e SEARCH_DRIVER=mongodb -e DB_DRIVER=mongodb -e PUBSUB_TYPE=local node npm run test:e2e
      - name: e2e-cassandra-test
        run: cd twake && docker-compose -f docker-compose.tests.yml up -d scylladb elasticsearch rabbitmq && sleep 60 && docker-compose -f docker-compose.tests.yml run -e NODE_OPTIONS=--unhandled-rejections=warn -e SEARCH_DRIVER=elasticsearch -e DB_DRIVER=cassandra node npm run test:e2e
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: cd twake && mv docker-compose.tests.yml docker-compose.yml
      - run: cd twake && docker-compose up -d
      - run: cd twake && docker-compose exec -T php php composer.phar install
      - run: cd twake && docker-compose exec -T php php bin/console twake:schema:update #Test if scylla is live
      - run: cd twake && docker-compose exec -T php php bin/console twake:mapping #Test if es is live
      - run: cd twake && docker-compose exec -T php php bin/console twake:init #Test in we can do things
